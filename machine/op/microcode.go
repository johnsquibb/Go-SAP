package op

import (
	"Go-SAP3/machine/types"
)

// Microcodes is the lookup table of 8085 Op Codes to cmd microinstructions.
// See Appendix 6 for full listing of 8085 Op Codes.
var Microcodes = [][]types.OctupleWord{
	ACI:      mcACI,
	ADC_A:    mcADC_A,
	ADC_B:    mcADC_B,
	ADC_C:    mcADC_C,
	ADC_D:    mcADC_D,
	ADC_E:    mcADC_E,
	ADC_H:    mcADC_H,
	ADC_L:    mcADC_L,
	ADC_M:    mcADC_M,
	ADD_A:    mcADD_A,
	ADD_B:    mcADD_B,
	ADD_C:    mcADD_C,
	ADD_D:    mcADD_D,
	ADD_E:    mcADD_E,
	ADD_H:    mcADD_H,
	ADD_L:    mcADD_L,
	ADD_M:    mcADD_M,
	ADI:      mcADI,
	ANA_A:    mcANA_A,
	ANA_B:    mcANA_B,
	ANA_C:    mcANA_C,
	ANA_D:    mcANA_D,
	ANA_E:    mcANA_E,
	ANA_H:    mcANA_H,
	ANA_L:    mcANA_L,
	ANA_M:    mcANA_M,
	ANI:      mcANI,
	CALL:     mcCALL,
	CC:       mcCC,
	CM:       mcCM,
	CMA:      mcCMA,
	CMC:      mcCMC,
	CMP_A:    mcCMP_A,
	CMP_B:    mcCMP_B,
	CMP_C:    mcCMP_C,
	CMP_D:    mcCMP_D,
	CMP_E:    mcCMP_E,
	CMP_H:    mcCMP_H,
	CMP_L:    mcCMP_L,
	CMP_M:    mcCMP_M,
	CNC:      mcCNC,
	CNZ:      mcCNZ,
	CP:       mcCP,
	CPE:      mcCPE,
	CPI:      mcCPI,
	CPO:      mcCPO,
	CZ:       mcCZ,
	DAD_B:    mcDAD_B,
	DAD_D:    mcDAD_D,
	DAD_H:    mcDAD_H,
	DCR_A:    mcDCR_A,
	DCR_B:    mcDCR_B,
	DCR_C:    mcDCR_C,
	DCR_D:    mcDCR_D,
	DCR_E:    mcDCR_E,
	DCR_H:    mcDCR_H,
	DCR_L:    mcDCR_L,
	DCR_M:    mcDCR_M,
	DCX_B:    mcDCX_B,
	DCX_D:    mcDCX_D,
	DCX_H:    mcDCX_H,
	IN:       mcIN,
	INR_A:    mcINR_A,
	INR_B:    mcINR_B,
	INR_C:    mcINR_C,
	INR_D:    mcINR_D,
	INR_E:    mcINR_E,
	INR_H:    mcINR_H,
	INR_L:    mcINR_L,
	INR_M:    mcINR_M,
	INX_B:    mcINX_B,
	INX_D:    mcINX_D,
	INX_H:    mcINX_H,
	JC:       mcJC,
	JM:       mcJM,
	JMP:      mcJMP,
	JNC:      mcJNC,
	JNZ:      mcJNZ,
	JP:       mcJP,
	JPE:      mcJPE,
	JPO:      mcJPO,
	JZ:       mcJZ,
	LDA:      mcLDA,
	LDAX_B:   mcLDAX_B,
	LDAX_D:   mcLDAX_D,
	LXI_B:    mcLXI_B,
	LXI_D:    mcLXI_D,
	LXI_H:    mcLXI_H,
	LXI_SP:   mcLXI_SP,
	MOV_A_A:  mcMOV_A_A,
	MOV_A_B:  mcMOV_A_B,
	MOV_A_C:  mcMOV_A_C,
	MOV_A_D:  mcMOV_A_D,
	MOV_A_E:  mcMOV_A_E,
	MOV_A_H:  mcMOV_A_H,
	MOV_A_L:  mcMOV_A_L,
	MOV_A_M:  mcMOV_A_M,
	MOV_B_A:  mcMOV_B_A,
	MOV_B_B:  mcMOV_B_B,
	MOV_B_C:  mcMOV_B_C,
	MOV_B_D:  mcMOV_B_D,
	MOV_B_E:  mcMOV_B_E,
	MOV_B_H:  mcMOV_B_H,
	MOV_B_L:  mcMOV_B_L,
	MOV_B_M:  mcMOV_B_M,
	MOV_C_A:  mcMOV_C_A,
	MOV_C_B:  mcMOV_C_B,
	MOV_C_C:  mcMOV_C_C,
	MOV_C_D:  mcMOV_C_D,
	MOV_C_E:  mcMOV_C_E,
	MOV_C_H:  mcMOV_C_H,
	MOV_C_L:  mcMOV_C_L,
	MOV_C_M:  mcMOV_C_M,
	MOV_D_A:  mcMOV_D_A,
	MOV_D_B:  mcMOV_D_B,
	MOV_D_C:  mcMOV_D_C,
	MOV_D_D:  mcMOV_D_D,
	MOV_D_E:  mcMOV_D_E,
	MOV_D_H:  mcMOV_D_H,
	MOV_D_L:  mcMOV_D_L,
	MOV_D_M:  mcMOV_D_M,
	MOV_E_A:  mcMOV_E_A,
	MOV_E_B:  mcMOV_E_B,
	MOV_E_C:  mcMOV_E_C,
	MOV_E_D:  mcMOV_E_D,
	MOV_E_E:  mcMOV_E_E,
	MOV_E_H:  mcMOV_E_H,
	MOV_E_L:  mcMOV_E_L,
	MOV_E_M:  mcMOV_E_M,
	MOV_H_A:  mcMOV_H_A,
	MOV_H_B:  mcMOV_H_B,
	MOV_H_C:  mcMOV_H_C,
	MOV_H_D:  mcMOV_H_D,
	MOV_H_E:  mcMOV_H_E,
	MOV_H_H:  mcMOV_H_H,
	MOV_H_L:  mcMOV_H_L,
	MOV_H_M:  mcMOV_H_M,
	MOV_L_A:  mcMOV_L_A,
	MOV_L_B:  mcMOV_L_B,
	MOV_L_C:  mcMOV_L_C,
	MOV_L_D:  mcMOV_L_D,
	MOV_L_E:  mcMOV_L_E,
	MOV_L_H:  mcMOV_L_H,
	MOV_L_L:  mcMOV_L_L,
	MOV_L_M:  mcMOV_L_M,
	MOV_M_A:  mcMOV_M_A,
	MOV_M_B:  mcMOV_M_B,
	MOV_M_C:  mcMOV_M_C,
	MOV_M_D:  mcMOV_M_D,
	MOV_M_E:  mcMOV_M_E,
	MOV_M_H:  mcMOV_M_H,
	MOV_M_L:  mcMOV_M_L,
	MVI_A:    mcMVI_A,
	MVI_B:    mcMVI_B,
	MVI_C:    mcMVI_C,
	MVI_D:    mcMVI_D,
	MVI_E:    mcMVI_E,
	MVI_H:    mcMVI_H,
	MVI_L:    mcMVI_L,
	MVI_M:    mcMVI_M,
	NOP:      mcNOP,
	ORA_A:    mcORA_A,
	ORA_B:    mcORA_B,
	ORA_C:    mcORA_C,
	ORA_D:    mcORA_D,
	ORA_E:    mcORA_E,
	ORA_H:    mcORA_H,
	ORA_L:    mcORA_L,
	ORA_M:    mcORA_M,
	ORI:      mcORI,
	OUT:      mcOUT,
	POP_B:    mcPOP_B,
	POP_D:    mcPOP_D,
	POP_H:    mcPOP_H,
	POP_PSW:  mcPOP_PSW,
	PUSH_B:   mcPUSH_B,
	PUSH_D:   mcPUSH_D,
	PUSH_H:   mcPUSH_H,
	PUSH_PSW: mcPUSH_PSW,
	RAL:      mcRAL,
	RAR:      mcRAR,
	RC:       mcRC,
	RET:      mcRET,
	RLC:      mcRLC,
	RM:       mcRM,
	RNC:      mcRNC,
	RNZ:      mcRNZ,
	RP:       mcRP,
	RPE:      mcRPE,
	RPO:      mcRPO,
	RRC:      mcRRC,
	RZ:       mcRZ,
	SBB_A:    mcSBB_A,
	SBB_B:    mcSBB_B,
	SBB_C:    mcSBB_C,
	SBB_D:    mcSBB_D,
	SBB_E:    mcSBB_E,
	SBB_H:    mcSBB_H,
	SBB_L:    mcSBB_L,
	SBB_M:    mcSBB_M,
	SBI:      mcSBI,
	STA:      mcSTA,
	STAX_B:   mcSTAX_B,
	STAX_D:   mcSTAX_D,
	STC:      mcSTC,
	SUB_A:    mcSUB_A,
	SUB_B:    mcSUB_B,
	SUB_C:    mcSUB_C,
	SUB_D:    mcSUB_D,
	SUB_E:    mcSUB_E,
	SUB_H:    mcSUB_H,
	SUB_L:    mcSUB_L,
	SUB_M:    mcSUB_M,
	SUI:      mcSUI,
	XRA_A:    mcXRA_A,
	XRA_B:    mcXRA_B,
	XRA_C:    mcXRA_C,
	XRA_D:    mcXRA_D,
	XRA_E:    mcXRA_E,
	XRA_H:    mcXRA_H,
	XRA_L:    mcXRA_L,
	XRA_M:    mcXRA_M,
	XRI:      mcXRI,
}
